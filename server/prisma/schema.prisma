generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Register {
  id         String    @id @default(uuid())
  cnpj       String    @unique
  email      String    @unique
  username   String
  phone      String
  approved   Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model User {
  id         String    @id @default(uuid())
  cnpj       String    @unique
  email      String    @unique
  username   String
  password   String
  phone      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  request Request[]
}

model Employee {
  id             String    @id @default(uuid())
  cpf            String?
  registration   String?
  full_name      String?
  birth_date     DateTime?
  phone          String?
  email          String?
  address        String?
  job_title      String?
  admission_date DateTime?
  last_login     DateTime?
  observation    String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
}

model MedicationType {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  medication Medication[]
}

model ActivePrinciple {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  medication Medication[]
}

model PharmacologicalGroup {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  medication Medication[]
}

model TherapeuthicIndication {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  medication Medication[]
}

model PregnancyRisk {
  id          String    @id @default(uuid())
  letter      String
  name        String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  medication Medication[]
}

model Prescription {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  medication Medication[]
}

model Laboratory {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  medication Medication[]
}

model Medication {
  id                  String  @id @default(uuid())
  medication_type_id  String
  active_principle_id String
  pregnancy_risk_id   String
  prescription_id     String?
  laboratory_id       String

  approvation_date DateTime
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  medication_type  MedicationType  @relation(fields: [medication_type_id], references: [id])
  active_principle ActivePrinciple @relation(fields: [active_principle_id], references: [id])
  pregnancy_risk   PregnancyRisk   @relation(fields: [pregnancy_risk_id], references: [id])
  prescription     Prescription?   @relation(fields: [prescription_id], references: [id])
  laboratory       Laboratory      @relation(fields: [laboratory_id], references: [id])

  request                 Request[]
  pharmacological_group   PharmacologicalGroup[]
  therapeuthic_indication TherapeuthicIndication[]
  equivalent_generic      Medication[]             @relation("EquivalentGenerics")
  equivalent_similar      Medication[]             @relation("EquivalentSimilars")
  generic_equivalent_to   Medication[]             @relation("EquivalentGenerics")
  similar_equivalent_to   Medication[]             @relation("EquivalentSimilars")
}

model Priority {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  request Request[]
}

model Status {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  request Request[]
}

model Request {
  id            String    @id @default(uuid())
  hospital_id   String
  medication_id String
  priority_id   String
  status_id     String
  quantity      Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  hospital   User       @relation(fields: [hospital_id], references: [id])
  medication Medication @relation(fields: [medication_id], references: [id])
  priority   Priority   @relation(fields: [priority_id], references: [id])
  status     Status     @relation(fields: [status_id], references: [id])
}
